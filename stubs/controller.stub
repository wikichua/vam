<?php

namespace {%custom_controller_namespace%};

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use {%model_namespace%}\{%model_class%};

class {%model_class%}Controller extends Controller
{
    public function index(Request $request)
    {
        $fields = collect($request->get('fields'))->where('filterable', true)->pluck('key')->all();
        $filter = $request->get('filter', '');
        $sortBy = $request->get('sortBy', '');
        $sortDesc = $request->get('sortDesc', '');
        ${%model_variables%} = {%model_class%}::query()->filter($filter, $fields)->sorting($sortBy, $sortDesc)->paginate($request->get('size', 20));
        return response()->json(${%model_variables%});
    }

    public function store(Request $request)
    {
        $request->validate([
            {%validations_create%}
        ]);

        ${%model_variable%} = {%model_class%}::create($request->all());

        activity('Created {%model_class%}: ' . ${%model_variable%}->id, $request->all(), ${%model_variable%});

        return response()->json([
            'id' => ${%model_variable%}->id,
            'status' => 'success',
            'message' => '{%model_class%} created.',
            'redirectTo' => '/{%model_variable%}/' . ${%model_variable%}->id . '/show',
        ]);
    }

    public function show($id)
    {
        ${%model_variable%} = {%model_class%}::query()->findOrFail($id);
        return response()->json(${%model_variable%});
    }

    public function update(Request $request, $id)
    {
        ${%model_variable%} = {%model_class%}::query()->findOrFail($id);
        $request->validate([
            {%validations_update%}
        ]);

        ${%model_variable%}->update($request->all());

        activity('Updated {%model_class%}: ' . ${%model_variable%}->id, $request->all(), ${%model_variable%});

        return response()->json([
            'id' => ${%model_variable%}->id,
            'status' => 'success',
            'message' => '{%model_class%} Updated.',
            'redirectTo' => '/{%model_variable%}/' . ${%model_variable%}->id . '/show',
        ]);
    }

    public function destroy($id)
    {
        ${%model_variable%} = {%model_class%}::query()->findOrFail($id);
        ${%model_variable%}->delete();

        activity('Deleted {%model_class%}: ' . ${%model_variable%}->id, [], ${%model_variable%});

        return response()->json([
            'id' => ${%model_variable%}->id,
            'status' => 'success',
            'message' => '{%model_class%} deleted.',
        ]);
    }

    public function getModelList(Request $request)
    {
        if ($request->get('key', '') == '') {
            return [];
        }

        if (is_array($request->get('key'))) {
            $keys = $request->get('key');
        } else {
            $keys = [$request->get('key')];
        }

        $lists = [];
        foreach ($keys as $key) {
            $method = "scope" . studly_case($key) . "Method";
            $lists[$key] = method_exists($this, $method) ? $this->{$method}() : [];
        }
        return response()->json($lists);
    }

    {%scopeModelMethods%}
}
